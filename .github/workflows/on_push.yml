name: linker_app (on_push)
on: [ pull_request, push ]
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

      LINKER_APP_MESSAGE_QUEUE: "redis://redis"
      LINKER_APP_MESSAGE_QUEUE_CHANNEL: "linker-app"
      LINKER_APP_SECRET_KEY: "SECRET_KEY_FROM_ENV"
      LINKER_APP_WTF_CSRF_SECRET_KEY: "SECRET_CSRF_FROM_ENV"

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379


    strategy:
      max-parallel: 4
      matrix:
        db: [ postgres ]
        mq: [ redis ]
        python-version: [ "3.10" ]

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false

      - name: Install deps
        run: |
          poetry install --no-interaction --no-ansi
          
      - name: Migrate database
        run: |
          make migrate

      - name: Run tests
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
        run: |
          make test

      - name: Lint with flake8
        run: |
          make lint

  send_wrong_tg_message:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ always() && needs.build_and_test.result != 'success' }}
    steps:
      - name: send failure message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_TOKEN }}
          message: |
            Repo: ${{ github.repository }}
            By: ${{ github.actor }} 
            Msg: ${{ github.event.commits[0].message }}
            Status: ❌${{ github.workflow }} Failed!❌
            
            Changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

  send_success_tg_message:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ always() && needs.build_and_test.result == 'success' }}
    steps:
      - name: send success message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_TOKEN }}
          photo: /.github/images/success.png
          message: |
            Repo: ${{ github.repository }}
            By: ${{ github.actor }} 
            Msg: ${{ github.event.commits[0].message }}
            Status: ✅${{ github.workflow }} Success!✅
            
            Changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
