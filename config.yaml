SECRET_KEY: "hack-my-secret-key"
PORT: 8000
HOST: '0.0.0.0'
LOG_PATH: &LOG_PATH logs/app.log

SQLALCHEMY_DATABASE_URI: &DB_URL "postgresql://test:test@localhost/test_db"
SQLALCHEMY_POOL_SIZE: 5  # long living connections
SQLALCHEMY_MAX_OVERFLOW: 10  # limit for pool overflow. Set -1 to no limit
SQLALCHEMY_TIMEOUT: 30 # sec
WTF_CSRF_SECRET_KEY: 'a random string'
TEST_LINKER_APP_PG_URL: *DB_URL  # production db used also for test. change it if needed

SOCKETIO:
  message_queue: "redis://"
  channel: "linker_socketio"
  logger: true
  engineio_logger: true
  cors_allowed_origins: "*"
  port: 8000
  host: '0.0.0.0'
DB:
  url: 'postgresql://user:test@localhost/test_db'
LOGGING:
  LEVEL: INFO

  FILE:
    LEVEL: &FILE_LEVEL INFO
    HANDLER:
      maxBytes: 1024 # 1MB = 1024 Bytes
      backupCount: 10 # max backup files
      filename: *LOG_PATH
    FORMATTER:
      #format
      fmt: "%(asctime)s - %(levelname)s - %(message)s"

  BUFFER:
    LOG_BUFFER_SIZE: 50  # count of last log messages stored in buffer
    LEVEL: *FILE_LEVEL
    FORMATTER:
      #format
      fmt: "%(asctime)s - %(levelname)s - %(message)s"

  WS:
    LEVEL: NOTSET
    SHOWED_COUNT: 50  # count of last log messages seen when page is opened
    EVENT_NAME: new_log  # event name for adding a new log line at frontend
    NAMESPACE: logs  # namespace name for socketio handler
    FORMATTER:
      #format
      fmt: "%(asctime)s - %(levelname)s - %(message)s"

