SECRET_KEY: "hack-my-secret-key"
MESSAGE_QUEUE: &MQ "redis://"  # redis at localhost
MESSAGE_QUEUE_CHANNEL: "linker_app_socketio"

MQ_HOST: 'localhost'
MQ_PORT: '6379'
MQ_FILE_CHANEL: 'linker_app_file_parser'

RMQ_HOST: 'localhost'
RMQ_PORT: '5672'
RMQ_FILEQUEUE: 'linker_app_file_parser'
#RMQ_MODE: 'PERSISTENT_DELIVERY_MODE' 'linker_app_file_parser'

PORT: 5000
HOST: '0.0.0.0'
CORS_ALLOWED_ORIGINS: &CORS_ALLOWED "*"
LOG_PATH: &LOG_PATH logs/app.log
FILES_STORE_DIR: "/files"

#dINKER_APP_BROKER_URL_HOST=redis
#RESULT_BACKEND_HOST=redis

SQLALCHEMY_DATABASE_URI: &DB_URL "postgresql://test:test@localhost/test_db"
SQLALCHEMY_POOL_SIZE: 5  # long living connections
SQLALCHEMY_MAX_OVERFLOW: 10  # limit for pool overflow. Set -1 to no limit
SQLALCHEMY_TIMEOUT: 30 # sec
WTF_CSRF_SECRET_KEY: 'a random string'

# if no table specified for this, then important to add slash at the end postgresql://test:test@localhost/"
#CI_LINKER_APP_PG_URI: *DB_URL # production db used also for test. change it if needed
CI_LINKER_APP_PG_URI: "postgresql://test:test@localhost/test_db"

SOCKETIO:
  logger: true
  engineio_logger: true

LOGGING:
  LEVEL: INFO

  FILE:
    LEVEL: &FILE_LEVEL INFO
    HANDLER:
      maxBytes: 1024 # 1MB = 1024 Bytes
      backupCount: 10 # max backup files
      filename: *LOG_PATH
    FORMATTER:
      #format
      fmt: "%(asctime)s - %(levelname)s - %(message)s"

  BUFFER:
    LOG_BUFFER_SIZE: 50  # count of last log messages stored in buffer
    LEVEL: *FILE_LEVEL
    FORMATTER:
      #format
      fmt: "%(asctime)s - %(levelname)s - %(message)s"

  WS:
    LEVEL: NOTSET
    SHOWED_COUNT: 50  # count of last log messages seen when page is opened
    EVENT_NAME: new_log  # event name for adding a new log line at frontend
    NAMESPACE: "/logs" # namespace name for socketio handler
    FORMATTER:
      #format
      fmt: "%(asctime)s - %(levelname)s - %(message)s"

